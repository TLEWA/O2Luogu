// 定义样式节点
// 每一个样式节点都是一个对象，包含了样式的所有信息
// 样式节点存在继承关系，样式节点可以一个父节点
// 构造样式树的过程中，会根据继承关系，将样式节点的信息合并到一起

// 结构：样式树上挂载样式节点，样式节点上挂载样式数据，进行初步样式编译。编译后合并样式数据然后将样式注册

style_name_map = {}

	// 定义样式属性编译器类
	// 样式属性编译器类的构造函数
	make_Style_Compiler(name="null_style_compiler",compiler_func=null_func) // 传入样式属性编译器的类型和数据
		// 一个完整的样式属性编译器应该至少含有：
		// 1. 样式的属性编译器
		// 2. 属性编译器的名称

		Compiler = {
			object: "Style_Compiler",
			name: compiler
		}
		return Compiler

	// 定义样式 Value 类
	// 样式 Value 类的构造函数
	make_Style_Value(attr,compilers=(make_Style_Compiler())) // 传入样式值的类型和数据
		// 一个完整的样式值应该至少含有：
		// 1. 样式的属性
		// 2. 样式的属性编译器

		Style = {
			object: "Style_Value"
			style_attr: attr
		}

		for compiler in compilers
			Style = merge_class(Style,compiler)

		return Style

	// 定义样式数据类
	// 样式数据类的构造函数
	make_Style_Data(style_data={}) // 传入样式数据的类型和数据
		// 一个完整的样式数据应该至少含有：
		// 1. 样式数据的键值对

		Style = {
			object: "Style_Data",
			data: style_data // 样式的键
		}
		return Style

	// 定义样式节点类
	// 样式节点类的构造函数
	make_Style_Node(node_name,style_map=make_Style_Data(),style_selector="") // 传入样式节点的类型和数据
		// 一个完整的样式节点应该至少含有：
		// 1. 样式数据表
		// 2. 样式对应的选择器

		Style = {
			object: "Style_Node",
			name: node_name,
			selector: style_selector
		}
		Style = merge_class(Style,style_map)

		return Style
